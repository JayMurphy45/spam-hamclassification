# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bEtSs3FcuC2eOsgCqcMmV-D0oBgBSWIJ
"""

# USE KMEANS ALGORITHM TO CLUSTER THE DATA AURILLIA SAID

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd, numpy as np
import nltk, re
from string import punctuation

from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

import text_mining_utils as tmu

data = pd.read_csv('spam.csv', encoding='latin-1')
data.head()

# Drop unnamed extra columns
data = data.iloc[:, :2]

# Rename columns
data.columns = ["label", "text"]

# Check for missing values
print(data.isnull().sum())

# Convert labels to binary (ham = 0, spam = 1)
data["label"] = data["label"].map({"ham": 0, "spam": 1})

# Show dataset info
data.info()

# Extract text data
documents = data['text'].tolist()

# Generate Count Matrix
baseline_count_matrix = tmu.build_count_matrix(documents)
print(baseline_count_matrix)

# Generate Term Frequency (TF) Matrix
baseline_tf_matrix = tmu.build_tf_matrix(documents)
print(baseline_tf_matrix)

# Generate TF-IDF Matrix
baseline_tfidf_matrix = tmu.build_tfidf_matrix(documents)
print(baseline_tfidf_matrix)


# Extract target labels
y = data["label"]

# Split dataset into training (80%) and testing (20%)
X_train_count, X_test_count, y_train, y_test = train_test_split(
    baseline_count_matrix, y, test_size=0.2, random_state=42
)
X_train_tf, X_test_tf, _, _ = train_test_split(
    baseline_tf_matrix, y, test_size=0.2, random_state=42
)
X_train_tfidf, X_test_tfidf, _, _ = train_test_split(
    baseline_tfidf_matrix, y, test_size=0.2, random_state=42
)

# Initialize the support vector classifier
clf = SVC(random_state=1)

# Evaluate model performance on training data
tmu.print_classif_report(clf, X_train_count, y_train)
tmu.print_classif_report(clf, X_train_tf, y_train)
tmu.print_classif_report(clf, X_train_tfidf, y_train)